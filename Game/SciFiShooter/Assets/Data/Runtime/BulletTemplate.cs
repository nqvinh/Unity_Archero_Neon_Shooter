// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var bulletTemplate = BulletTemplate.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class BulletTemplate
    {
        [JsonProperty("BulletType")]
        public BulletType BulletType { get; set; }

        [JsonProperty("BulletProperties")]
        public BulletProperties BulletProperties { get; set; }

        [JsonProperty("EmitterProperties")]
        public EmitterProperties EmitterProperties { get; set; }
    }

    public partial class BulletProperties
    {
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("speed")]
        public float Speed { get; set; }

        [JsonProperty("accel")]
        public float Accel { get; set; }

        [JsonProperty("jumpHeight")]
        public float JumpHeight { get; set; }

        [JsonProperty("jumpDistance")]
        public float JumpDistance { get; set; }

        [JsonProperty("sprialSpeed")]
        public float SprialSpeed { get; set; }
    }

    public partial class BulletType
    {
        [JsonProperty("CurrentType")]
        public string CurrentType { get; set; }

        [JsonProperty("bullet")]
        public Bullet[] Bullet { get; set; }
    }

    public partial class Bullet
    {
        [JsonProperty("Type")]
        public string Type { get; set; }

        [JsonProperty("Properties")]
        public Properties Properties { get; set; }
    }

    public partial class Properties
    {
        [JsonProperty("minAngle", NullValueHandling = NullValueHandling.Ignore)]
        public int MinAngle { get; set; }

        [JsonProperty("maxAngle", NullValueHandling = NullValueHandling.Ignore)]
        public int MaxAngle { get; set; }

        [JsonProperty("numSpray", NullValueHandling = NullValueHandling.Ignore)]
        public int NumSpray { get; set; }

        [JsonProperty("angle", NullValueHandling = NullValueHandling.Ignore)]
        public int Angle { get; set; }

        [JsonProperty("Template", NullValueHandling = NullValueHandling.Ignore)]
        public Template[] Template { get; set; }
    }

    public partial class Template
    {
        [JsonProperty("row")]
        public int Row { get; set; }

        [JsonProperty("col")]
        public int Col { get; set; }

        [JsonProperty("dir")]
        public int Dir { get; set; }
    }

    public partial class EmitterProperties
    {
        [JsonProperty("wave")]
        public int Wave { get; set; }

        [JsonProperty("rate")]
        public float Rate { get; set; }

        [JsonProperty("spinSpeed")]
        public float SpinSpeed { get; set; }
    }

    public partial class BulletTemplate
    {
        public static BulletTemplate FromJson(string json) => JsonConvert.DeserializeObject<BulletTemplate>(json, QuickType.BulletTemplateConverter.Settings);
    }

    public static class BulletTemplateSerialize
    {
        public static string ToJson(this BulletTemplate self) => JsonConvert.SerializeObject(self, QuickType.BulletTemplateConverter.Settings);
    }

    internal static class BulletTemplateConverter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
