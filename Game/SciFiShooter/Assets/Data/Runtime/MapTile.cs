// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var mapTile = MapTile.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class MapTile
    {
        [JsonProperty("columns")]
        public long Columns { get; set; }

        [JsonProperty("grid")]
        public Grid Grid { get; set; }

        [JsonProperty("margin")]
        public long Margin { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("spacing")]
        public long Spacing { get; set; }

        [JsonProperty("tilecount")]
        public long Tilecount { get; set; }

        [JsonProperty("tiledversion")]
        public string Tiledversion { get; set; }

        [JsonProperty("tileheight")]
        public long Tileheight { get; set; }

        [JsonProperty("tiles")]
        public Tile[] Tiles { get; set; }

        [JsonProperty("tilewidth")]
        public long Tilewidth { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("version")]
        public double Version { get; set; }

        public Tile GetTileWithId(int tileId)
        {
            return Array.Find(Tiles, tile => tile.Id == tileId);
        }
    }

    public partial class Grid
    {
        [JsonProperty("height")]
        public long Height { get; set; }

        [JsonProperty("orientation")]
        public string Orientation { get; set; }

        [JsonProperty("width")]
        public long Width { get; set; }
    }

    public partial class Tile
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("image")]
        public string Image { get; set; }

        [JsonProperty("imageheight")]
        public long Imageheight { get; set; }

        [JsonProperty("imagewidth")]
        public long Imagewidth { get; set; }
    }

    public partial class MapTile
    {
        public static MapTile FromJson(string json) => JsonConvert.DeserializeObject<MapTile>(json, QuickType.MapTileConverter.Settings);
    }

    public static class MapTileSerialize
    {
        public static string ToJson(this MapTile self) => JsonConvert.SerializeObject(self, QuickType.MapTileConverter.Settings);
    }

    internal static class MapTileConverter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
